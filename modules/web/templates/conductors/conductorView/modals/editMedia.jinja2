<!-- Media edit form modal -->
<div class="modal fade" id="editMediaFormModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="editMediaFormModalTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <form id="formEditMedia" enctype="multipart/form-data">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="editMediaFormModalTitle">Média</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">

                    <div class="container-fluid">

                        <div id="gTypeContainer">
                            <div class="row mb-3">
                                <label class="col-form-label col-sm-3" for="gType">
                                    Type
                                </label>
                                <div class="col-9">
                                    <select id="gType" name="type" class="form-select">
                                        <option value="media">Média</option>
                                        <option value="web">Lien web</option>
                                    </select>
                                    <span class="form-text">
                                        Choisissez quel type de média vous souhaitez ajouter.
                                    </span>
                                </div>
                            </div>
                        </div>

                        <div id="gNameContainer">
                            <div class="row mb-3">
                                <label class="col-form-label col-sm-3" for="gName">
                                    Nom
                                </label>
                                <div class="col-9">
                                    <input type="text" id="gName" name="name" class="form-control">
                                    <span class="form-text">
                                        Donnez un nom simple à votre média.
                                    </span>
                                </div>
                            </div>
                        </div>

                        <div id="gSourceContainer">
                            <div class="row mb-3">
                                <label class="col-form-label col-sm-3" for="gSource">
                                    Source
                                </label>
                                <div class="col-9">
                                    <input type="text" id="gSource" name="source" class="form-control">
                                    <span class="form-text">
                                        Optionnel. Vous pouvez spécifier une source pour votre média.
                                    </span>
                                </div>
                            </div>
                        </div>

                        <div id="gDiskUsageContainer">
                            <div class="row mb-3">
                                <label class="col-form-label col-sm-3">
                                    Espace disque
                                </label>
                                <div class="col-9">
                                    <div class="progress" style="height: 30px;">
                                        <div class="progress-bar bg-primary" role="progressbar" style="width: 50%;" id="diskUsageProgress" title="Espace utilisé">-.-- GB</div>
                                        <div class="progress-bar bg-secondary" role="progressbar" style="width: 50%;" id="diskFreeProgress" title="Espace disponible">-.-- GB</div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div id="gFileContainer">
                            <div class="row mb-3">
                                <label class="col-form-label col-sm-3" for="gFile">
                                    Fichier
                                </label>
                                <div class="col-9">
                                    <input type="file" id="gFile" name="file" class="form-control">
                                    <span class="form-text">
                                        Indiquez ici le fichier à téléverser.
                                    </span>
                                </div>
                            </div>
                        </div>

                        <div id="gVolumeContainer">
                            <div class="row mb-3">
                                <label class="col-form-label col-sm-3" for="gVolume">
                                    Volume
                                </label>
                                <div class="col-9">
                                    <div class="row">
                                        <div class="col-10">
                                            <input type="range" id="gVolume" name="volume" class="form-range col-8" min="0" max="1" step="0.1" value="0">
                                        </div>
                                        <div class="col-auto text-center">
                                            <span id="editMediaVolumeValue">0 %</span>
                                        </div>
                                    </div>
                                    <span class="form-text">
                                        <u>Seulement pour les vidéos.</u> Spécifiez le volume de lecture du média.<br>
                                        <b>Attention : veillez à bien mettre le son uniquement quand c'est nécessaire.</b>
                                    </span>
                                </div>
                            </div>
                            <script>
                                function _updateMediaVolumeDisplay(source) {
                                    document.getElementById('editMediaVolumeValue').innerText =  Math.round(source.value*100) + ' %';
                                }

                                const _gVolume = document.getElementById("gVolume");
                                gVolume.addEventListener("change", function() { _updateMediaVolumeDisplay(_gVolume); });
                                gVolume.addEventListener("input", function() { _updateMediaVolumeDisplay(_gVolume); });
                                window.setInterval(function() { _updateMediaVolumeDisplay(_gVolume); }, 500);
                            </script>
                        </div>

                        <div id="gLoopContainer">
                            <div class="row mb-3">
                                <label class="col-form-label col-sm-3" for="gLoop">
                                    Lecture en boucle
                                </label>
                                <div class="col-9">
                                    <input type="checkbox" id="gLoop" name="loop" class="form-check-input">
                                    <label for="gLoop">Lecture en boucle</label>
                                    <div class="form-text">
                                        <u>Seulement pour les vidéos.</u> Indique si la vidéo doit-être lue en boucle ou non.
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div id="gVolumeAfterLoopContainer">
                            <div class="row mb-3">
                                <label class="col-form-label col-sm-3" for="gVolumeAfterLoop">
                                    Volume <u>après</u> la boucle
                                </label>
                                <div class="col-9">
                                    <div class="row">
                                        <div class="col-10">
                                            <input type="range" id="gVolumeAfterLoop" name="volumeAfterLoop" class="form-range col-8" min="0" max="1" step="0.1" value="0">
                                        </div>
                                        <div class="col-auto text-center">
                                            <span id="editMediaVolumeAfterLoopValue">0 %</span>
                                        </div>
                                    </div>
                                    <span class="form-text">
                                        <u>Seulement pour les vidéos en boucle.</u> Spécifiez le volume de lecture du média une fois la première boucle passée.
                                    </span>
                                </div>
                            </div>
                            <script>
                                function _updateMediaVolumeAfterLoopDisplay(source) {
                                    document.getElementById('editMediaVolumeAfterLoopValue').innerText =  Math.round(source.value*100) + ' %';
                                }

                                const _gVolumeAfterLoop = document.getElementById("gVolumeAfterLoop");
                                gVolumeAfterLoop.addEventListener("change", function() { _updateMediaVolumeAfterLoopDisplay(_gVolumeAfterLoop); });
                                gVolumeAfterLoop.addEventListener("input", function() { _updateMediaVolumeAfterLoopDisplay(_gVolumeAfterLoop); });
                                window.setInterval(function() { _updateMediaVolumeAfterLoopDisplay(_gVolumeAfterLoop); }, 500);
                            </script>
                        </div>

                        <div id="gUrlContainer">
                            <div class="row mb-3">
                                <label class="col-form-label col-sm-3" for="gUrl">
                                    URL
                                </label>
                                <div class="col-9">
                                    <input type="text" id="gUrl" name="url" class="form-control" data-refused="false">
                                    <span class="form-text">
                                        Spécifiez l'URL de la page web à intégrer.
                                    </span>
                                </div>
                            </div>
                            <div class="row alert" id="gUrlAlert">
                                -
                            </div>
                        </div>

                        <div id="gMediaChannelContainer">
                            <div class="row mb-3">
                                <label class="col-form-label col-sm-3" for="gMediaChannel">
                                    Canaux
                                </label>
                                <div class="col-9">
                                    <select id="gMediaChannel" name="mediaChannel" multiple class="form-select">
                                        {% for c in mediaChannels %}
                                            <option value="{{ c.id }}">{{ c.name }}</option>
                                        {% endfor %}
                                    </select>
                                    <span class="form-text">
                                        Choisissez dans quels canaux envoyer ce média.
                                    </span>
                                </div>
                            </div>
                        </div>

                        <div id="gWebChannelContainer">
                            <div class="row mb-3">
                                <label class="col-form-label col-sm-3" for="gWebChannel">
                                    Canaux
                                </label>
                                <div class="col-9">
                                    <select id="gWebChannel" name="webChannel" multiple class="form-select">
                                        {% for c in webChannels %}
                                            <option value="{{ c.id }}">{{ c.name }}</option>
                                        {% endfor %}
                                    </select>
                                    <span class="form-text">
                                        Choisissez dans quels canaux envoyer ce média.
                                    </span>
                                </div>
                            </div>
                        </div>

                        <div id="gTranscodeSettingsContainer">
                            <div class="accordion mb-3" id="accordionTranscodeSettings">
                                <div class="accordion-item">
                                    <div class="accordion-header">
                                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#accordionTranscodeSettingsPan" aria-expanded="false" aria-controls="collapseOne">
                                            <i class="bi bi-film"></i>&nbsp;
                                            Paramètres avancés de transcodage vidéo
                                        </button>
                                    </div>
                                    <div id="accordionTranscodeSettingsPan" class="accordion-collapse collapse" data-bs-parent="#accordionTranscodeSettings">
                                        <div class="accordion-body">

                                            <div id="gCutContainer">
                                                <div class="row mb-3">
                                                    <label class="col-form-label col-sm-3" for="gCutBegin">
                                                        Couper la vidéo
                                                    </label>
                                                    <div class="col-9">
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="bi bi-chevron-bar-left"></i></span>
                                                            <span class="input-group-text">Début :</span>
                                                            <input type="text" id="gCutBegin" name="cutBegin" class="form-control">
                                                            <span class="input-group-text">Fin :</span>
                                                            <input type="text" id="gCutEnd" name="cutEnd" class="form-control">
                                                            <span class="input-group-text"><i class="bi bi-chevron-bar-right"></i></span>
                                                        </div>
                                                        <div class="form-text">
                                                            <u>Seulement pour les vidéos.</u> Indiquez des points de coupe d'entrée et de sortie en format X:XX.<br>
                                                            Laissez vide pour convertir toute la longueur de la vidéo.
                                                        </div>
                                                    </div>
                                                </div>
                                                <script>
                                                    $(function() {
                                                        let _fieldCutBegin = document.getElementById("gCutBegin");
                                                        let _fieldCutEnd = document.getElementById("gCutEnd");

                                                        _fieldCutBegin.addEventListener("change", function(e) {
                                                            let secondsBegin = getSecondsFromString(e.target.value);
                                                            let secondsEnd = getSecondsFromString(_fieldCutEnd.value);

                                                            // On vérifie le format
                                                            if(secondsBegin!==false) {
                                                                // Si on est au moins à 0 secondes
                                                                if(secondsBegin >= 0) {
                                                                    // Si secondsEnd est false, on le set à begin+30
                                                                    if(secondsEnd === false) {
                                                                        _fieldCutEnd.value = getStringFromSeconds(secondsBegin + 30);
                                                                    }
                                                                    // Si on est > ou = à cutEnd, on remet 1 seconde avant
                                                                    else if(secondsEnd >= secondsEnd) {
                                                                        e.target.value = getStringFromSeconds(Math.max(0, secondsEnd - 1));
                                                                    }
                                                                }
                                                                else {
                                                                    e.target.value = getStringFromSeconds(0);
                                                                }
                                                            }
                                                            else {
                                                                e.target.value = "";
                                                            }
                                                        });

                                                        _fieldCutEnd.addEventListener("change", function(e) {
                                                            let secondsBegin = getSecondsFromString(_fieldCutBegin.value);
                                                            let secondsEnd = getSecondsFromString(e.target.value);

                                                            // On vérifie le format
                                                            if(secondsEnd!==false) {
                                                                // Si on est au moins à 1 seconde
                                                                if(secondsEnd >= 1) {
                                                                    // Si secondsBegin est false, on le set à 0
                                                                    if(secondsBegin === false) {
                                                                        _fieldCutBegin.value = getStringFromSeconds(0);
                                                                    }
                                                                    // Si secondsBegin est > ou = à secondsEnd, on remet 1 seconde avant
                                                                    else if(secondsBegin >= secondsEnd) {
                                                                        e.target.value = getStringFromSeconds(secondsBegin + 1);
                                                                    }
                                                                }
                                                                else {
                                                                    e.target.value = getStringFromSeconds(1);
                                                                }
                                                            }
                                                            else {
                                                                e.target.value = "";
                                                            }
                                                        });
                                                    });
                                                </script>
                                            </div>

                                            <div id="gRotateContainer">
                                                <div class="row mb-3">
                                                    <label class="col-form-label col-sm-3" for="gRotate">
                                                        Pivoter la vidéo
                                                    </label>
                                                    <div class="col-9">
                                                        <select id="gRotate" name="rotate" class="form-control">
                                                            <option value="0" selected>0°</option>
                                                            <option value="90">90°</option>
                                                            <option value="180">180°</option>
                                                            <option value="270">270°</option>
                                                        </select>
                                                        <div class="form-text">
                                                            <u>Seulement pour les vidéos.</u> Vous permet de pivoter la vidéo lors de son transcodage.<br>
                                                            La rotation sera toujours faite dans le sens <b>horaire</b>.
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row mb-3 text-center">
                                                    <div class="col-3">
                                                    </div>
                                                    <div class="col-9" id="previewFrameContainer" data-rotate="0">
                                                        <span class="previewFrame"><span>A</span></span>
                                                        <span class="previewFrame"><span>A</span></span>
                                                        <span class="previewFrame"><span>A</span></span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>

                    <div class="alert alert-info text-center">
                        N'oubliez pas de prévisualiser vos médias une fois téléchargés !
                    </div>

                </div>

                <div class="modal-footer">
                    <button type="reset" id="gCancel" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                    <input type="hidden" name="id" id="gId" value="">
                    <input type="hidden" name="line" id="gLine" value="">
                    <button type="submit" class="btn btn-primary" id="gSubmit">
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        Valider
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>


<script>
    const _linksConstraints_source = [
        {% for c in linksConstraints %}
            {
                "pattern": "{{ c.pattern | replace('"', '\\"') | replace('\\', '\\\\') }}",
                "ignoreCase": {{ "true" if c.ignoreCase else "false" }},
                "description": "{{ c.description | replace('"', '\\"') | replace('\\', '\\\\') }}",
                "refuse": {{ "true" if c.refuse else "false" }},
                "alert": "{{ c.alert | replace('"', '\\"') | replace('\\', '\\\\') }}"
            },
        {% endfor %}
    ];

    // On vérifie si les patterns sont valides
    let linksConstraints = [];
    _linksConstraints_source.forEach((constraint, index) => {
        try {
            const regexPattern = new RegExp(constraint.pattern, ((constraint.ignoreCase) ? "i" : ""));
            console.debug(regexPattern + " est un pattern valide.", constraint);
            
            constraint.pattern = regexPattern;
            // On insert la contrainte à la liste
            linksConstraints.push(constraint);
        }
        catch(error) {
            console.error(constraint.pattern + " est un pattern invalide.", error, constraint);
        }
    });


    // On récupère les objets
    const fieldUrl = document.getElementById("gUrl");
    const alertUrl = document.getElementById("gUrlAlert");


    fieldUrl.addEventListener("input", (e) => {
        let test = checkPattern(e.target.value);

        if(test!==true) {
            alertUrl.innerHTML = textToLinks(test.alert);

            alertUrl.classList.remove("alert-danger");
            alertUrl.classList.remove("alert-warning");

            if(test.refuse) {
                alertUrl.classList.add("alert-danger");
                e.target.dataset.refused = true;
            }
            else {
                alertUrl.classList.add("alert-warning");
                e.target.dataset.refused = false;
            }

            alertUrl.style.display = "block";
        }
        else {
            alertUrl.style.display = "none";
            e.target.dataset.refused = false;
        }
    });


    /**
     * Vérifie la validité du champ avec tous les patterns
     **/
    function checkPattern(input) {
        var valid = true;

        for(let k=0; k<linksConstraints.length; k++) {
            const c = linksConstraints[k];

            const result = c.pattern.exec(input)
            if(result) {
                // On capture les éléments dans l'alerte
                c.alert = c.alert.replace(/\$([U]?)([0-9]+)/g, (match, urlmode, group) => {
                    const index = parseInt(group);

                    if(urlmode==="U")
                        return (typeof result[index] !== "undefined") ? encodeURIComponent(result[index]) : match;
                    else
                        return (typeof result[index] !== "undefined") ? result[index] : match;
                });

                valid = c;

                break;
            }
        }

        return valid;
    }


    // Lorsque jquery est loaded
    $(function() {
        function _changeRotatePreview(e) {
            let rotate = document.getElementById("gRotate").value;
            document.getElementById("previewFrameContainer").dataset.rotate = rotate;    
        }

        document.getElementById("gRotate").addEventListener("change", _changeRotatePreview);
        window.setInterval(_changeRotatePreview, 1000);
    });
</script>
<style>
    #previewFrameContainer {
        height: 120px;
        display: flex;
        flex-direction: row;
    }

    .previewFrame {
        position: relative;
        width: 120px;
        line-height: 67.5px;
        height: 67.5px;
        margin: 20px auto 0px auto;
        border: 1px solid white;
        font-size: 40px;
        text-align: center;
        transform-origin: center;
    }
    .previewFrame:nth-child(2) span {
        display: block;
        transform-origin: center;
        transform: rotate(90deg);
    }
    .previewFrame:nth-child(3) span {
        display: block;
        transform-origin: center;
        transform: rotate(270deg);
    }

    #previewFrameContainer[data-rotate="0"] .previewFrame {
        animation: none;
    }

    #previewFrameContainer[data-rotate="90"] .previewFrame {
        animation: anim90deg 3s ease-in-out infinite normal;
    }

    #previewFrameContainer[data-rotate="180"] .previewFrame {
        animation: anim180deg 3.5s ease-in-out infinite normal;
    }

    #previewFrameContainer[data-rotate="270"] .previewFrame {
        animation: anim270deg 4s ease-in-out infinite normal;
    }

    @keyframes anim90deg {
        0%,25% { transform: rotate(0deg); }
        75%,100% { transform: rotate(90deg); }
    }
    @keyframes anim180deg {
        0%,25% { transform: rotate(0deg); }
        75%,100% { transform: rotate(180deg); }
    }
    @keyframes anim270deg {
        0%,25% { transform: rotate(0deg); }
        75%,100% { transform: rotate(270deg); }
    }


    #gSubmit .spinner-border {
        display: none;
    }
    #gSubmit:disabled .spinner-border {
        display: inline-block;
    }
</style>