<!DOCTYPE html>
<html>
    <head>
        <title>Viewer</title>
        <style>
            body {
                background: black;
                margin: 0px;
                padding: 0px;
                overflow: hidden;
            }

            .media_item {
                transition: .3s opacity;
                opacity: 1;
                width: 100vw;
                height: 100vh;
                position: absolute;
            }

            .media_item.invisible {
                opacity: 0;
                z-index: -999;
            }

            .media_credit {
                position: absolute;
                right: 20px;
                bottom: 20px;
                z-index: 3;
                font-family: "Arial", sans-serif;
                font-weight: bold;
                color: white;
                font-size: 5vh;
                text-shadow: 0px 0px 10px black;
            }

            .media_foreground {
                position: absolute;
                top: 0px;
                left: 0px;
                right: 0px;
                bottom: 0px;
                z-index: 2;
            }

                .media_foreground video, .media_foreground img, .media_foreground audio {
                    width: 100%;
                    height: 100%;
                    object-fit: contain;
                    backdrop-filter: blur(30px) brightness(60%);
                    -webkit-backdrop-filter: blur(30px) brightness(60%);
                    -moz-backdrop-filter: blur(30px) brightness(60%);
                    -o-backdrop-filter: blur(30px) brightness(60%);
                    -ms-backdrop-filter: blur(30px) brightness(60%);
                }

            .media_background {
                position: absolute;
                top: 0px;
                left: 0px;
                right: 0px;
                bottom: 0px;
                z-index: 1;
            }

                .media_background video, .media_background img, .media_background audio {
                    width: 100%;
                    height: 100%;
                    transform: scale(130%);
                    object-fit: cover;
                }
        </style>


        <style>
            {{ channel.customCSS }}
        </style>

            
        <style>
            #identifier {
                position: absolute;
                top: 0px;
                left: 0px;
                right: 0px;
                bottom: 0px;
                display: flex;
                padding: 100px;
                box-sizing: border-box;
                flex-direction: column;
                justify-content: baseline;
                align-items: start;
                gap: 10px;
                color: white;
                text-shadow: 0px 0px 3px black;
                font-family: monospace;
                font-weight: bold;
                animation: disappear .5s 6s forwards;
                background-image: url("/static/img/smpte.png");
                background-repeat: no-repeat;
                background-position: center;
                background-size: 100% 100%;
            }

                #identifier > * {
                    background: rgba(0,0,0,.8);
                    padding: 10px;
                }

                #identifier_id {
                    font-size: 4vh;
                }
                #identifier_name {
                    font-size: 10vh;
                }
                #identifier_resolution {
                    font-size: 7vh;
                }
                #identifier_show {
                    font-size: 6vh;
                }
            
            @keyframes disappear {
                0% { opacity: 1; }
                100% { opacity: 0; }
            }
        </style>
    </head>
    <body>
        <div id="identifier">
            <div id="identifier_id">
                {{ channel.id }}
            </div>
            <div id="identifier_name">
                {{ channel.name }}
            </div>
            <div id="identifier_resolution">
                {{ channel.width }}x{{ channel.height }}
            </div>
            <div id="identifier_show">
                {{ channel.show.name }}
            </div>
        </div>
        <div id="main">
            <!--<div class="media_item video">
                <div class="media_credit">
                    {{ viewerID | safe }}
                </div>
                <div class="media_foreground">
                    <video src="/medias/test.webm" id="fff"></video>
                </div>
                <div class="media_background">
                    <video src="/medias/test.webm" muted></video>
                </div>
            </div>-->
        </div>


        <script src="/static/js/socket/socket.io.min.js"></script>
        <script>
            // ID du viewer en cours
            const viewerID = "{{ channel.id }}";

            // ID des médias armés et en cours de lecture
            var armedMedia = null;
            var takedMedia = null;

            console.log("Viewer ID \""+viewerID+"\"");



            var currentZindex = 9999;

            function generateGUID() {
                return 'yxxxyxyyxyxyxxyxyxyxyxyxyxyxyxyxyxyxyxx'.replace(/[xy]/g, function(c) {
                    var r = Math.random() * 16 | 0,
                        v = c == 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                });
            }

            function getVideoByTarget(target) {
                let obj = document.getElementById("target-"+target)
            }

            /**
            * Crée une nouvelle structure DOM contenant un nouveau média.
            **/
            function mediaArm(type, src, source, volume=1, volumeAfterLoop=1, loop=false) {
                let id = generateGUID();

                // Création du nouvel élément
                let dom_media_item = document.createElement("div");
                dom_media_item.classList.add("media_item");
                dom_media_item.classList.add(type);
                dom_media_item.setAttribute("id", "media-item-" + id);
                dom_media_item.style.zIndex = currentZindex--;
                dom_media_item.dataset.id = id;
                dom_media_item.classList.add("invisible"); // Par défaut l'élément est invisible

                let dom_media_credit = document.createElement("div");
                dom_media_credit.classList.add("media_credit");
                dom_media_credit.innerText = source.trim()!="" ? "Source : " + source : "";

                let dom_media_foreground = document.createElement("div");
                dom_media_foreground.classList.add("media_foreground");

                let dom_media_background = document.createElement("div");
                dom_media_background.classList.add("media_background");

                let dom_media_foreground_obj = null;
                let dom_media_background_obj = null;

                // On crée les objets média selon le type
                if(type=="video") {
                    dom_media_background_obj = document.createElement("video");
                    dom_media_background_obj.volume = 0;
                    
                    dom_media_foreground_obj = document.createElement("video");
                    dom_media_foreground_obj.dataset.volumeAfterLoop = volumeAfterLoop;
                    dom_media_foreground_obj.dataset.loop = loop;
                }
                else if(type=="picture") {
                    dom_media_background_obj = document.createElement("img");
                    dom_media_background_obj.setAttribute("alt", "");

                    dom_media_foreground_obj = document.createElement("img");
                    dom_media_foreground_obj.setAttribute("alt", "");
                }

                // Définition des ID dom
                dom_media_background_obj.setAttribute("id", "media-item-obj-background-" + id);
                dom_media_background_obj.classList.add("media-item-obj-background");
                dom_media_foreground_obj.setAttribute("id", "media-item-obj-foreground-" + id);
                dom_media_foreground_obj.classList.add("media-item-obj-foreground");

                // Définition des URLs des médias
                dom_media_background_obj.setAttribute("src", src);
                dom_media_foreground_obj.setAttribute("src", src);
                if(type=="video")
                    dom_media_foreground_obj.volume = volume;


                // Synchronisation des médias foreground/background
                if(type=="video") {
                    const vm = dom_media_foreground_obj;
                    const vs = dom_media_background_obj;
                    const syncVideos = () => {
                        vs.currentTime = vm.currentTime;
                        if(vm.paused && !vs.paused)
                            vs.pause();
                        else if(!vm.paused && vs.paused)
                            vs.play();
                    };
                    vm.addEventListener("play", function() {
                        vs.play();
                        vs.currentTime = vm.currentTime;
                    });
                    vm.addEventListener("pause", function() {
                        vs.pause();
                        vs.currentTime = vm.currentTime;
                    });
                    vm.addEventListener("timeupdate", function() {
                        syncVideos();
                    });
                    vm.addEventListener("ended", function(e) {
                        // Si on loop la vidéo, on retourne au début
                        if(vm.dataset.loop == "true") {
                            console.log("Loop mode. Replay file with volume "+(vm.volume*100)+".");

                            vm.currentTime = 0;
                            vs.currentTime = 0;
                            vm.play();
                            vs.play();

                            e.target.volume = 0;
                        }
                    });
                }


                // On récupère l'élément parent
                let parentElement = document.getElementById("main");

                dom_media_background.appendChild(dom_media_background_obj);
                dom_media_foreground.appendChild(dom_media_foreground_obj);
                dom_media_item.appendChild(dom_media_credit);
                dom_media_item.appendChild(dom_media_foreground);
                dom_media_item.appendChild(dom_media_background);

                if(parentElement.firstChild === null)
                    parentElement.appendChild(dom_media_item);
                else
                    parentElement.insertBefore(dom_media_item, parentElement.firstChild);

                // On supprime le media armé s'il existe
                if(armedMedia !== null) {
                    let toDelete = document.getElementById("media-item-" + armedMedia);
                    if(toDelete !== null) {
                        toDelete.parentNode.removeChild(toDelete);
                    }
                }

                // On change l'ID du média armé
                armedMedia = id;

                // On retourne les données
                return {
                    playerID: id,
                    element: dom_media_item
                };

            }


            /**
            * Transite un élément armé vers un élément joué
            **/
            function takeArmed() {
                // Seulement s'il y a un élément armé
                if(armedMedia !== null) {
                    let newMedia = document.getElementById("media-item-" + armedMedia);
                    if(newMedia !== null) {
                        // Si un élément joué existe, on le passe en invisible
                        if(takedMedia !== null) {
                            let toHide = document.getElementById("media-item-" + takedMedia);
                            if(toHide !== null) {
                                toHide.classList.add("invisible");
                            }
                        }

                        // Destruction de l'élément dans 10 secondes
                        window.setTimeout(function(id) {
                            let toDelete = document.getElementById("media-item-" + id);
                            if(toDelete !== null) {
                                toDelete.parentNode.removeChild(toDelete);
                            }
                        }, 10000, takedMedia);

                        // On enlève la classe invisible du nouveau média
                        newMedia.classList.remove("invisible");

                        // On transforme le média armé en media joué
                        takedMedia = armedMedia;

                        // On vide l'ID du média armé
                        armedMedia = null;

                        // On lance la lecture du nouveau média si besoin
                        mediaPlay(takedMedia);
                    }
                }
            }


            /**
            * Lance la lecture du media défini par l'ID indiqué
            */
            function mediaPlay(id) {
                // On récupère le média
                let mediaItem = document.getElementById("media-item-" + id);
                if(mediaItem!==null) {
                    // On vérifie si le type de media est compatible avec cette commande
                    if(mediaItem.classList.contains("video")) {
                        // On récupère les 2 objets et on lance la lecture
                        let foregroundObj = document.getElementById("media-item-obj-foreground-" + id);
                        let backgroundObj = document.getElementById("media-item-obj-foreground-" + id);

                        if(foregroundObj !== null)
                            foregroundObj.play();
                        
                        if(backgroundObj !== null)
                            backgroundObj.play();
                    }
                }
            }


            /**
            * Défini le volume d'un média avec une rampe et un timing
            */
            function volumeSet(id=null, exclude=false, target=0, step=0.04, interval=50) {
                // On récupère le média
                let mediaItem = document.querySelectorAll(".media_item.video").forEach(element => {
                    if(id==null || (!exclude && id==element.dataset.id) ||  (exclude && id!=element.dataset.id)) {

                        let obj = element.querySelector(".media-item-obj-foreground");
                        // On défini si on est en mode down
                        let down = obj.volume > target;

                        const intervalInstance = setInterval(() => {

                            // On calcule le nouveau volume
                            let newVol = down ? obj.volume-step : obj.volume+step;

                            // On baisse le volume
                            obj.volume = Math.min(1, Math.max(0, newVol));

                            // On limite
                            if(down && obj.volume<target)
                                obj.volume = target;
                            else if(!down && obj.volume>target)
                                obj.volume = target;

                            // On arrête si on arrive au volume cible
                            if(obj.volume == target) {
                                clearInterval(intervalInstance);
                            }
                        }, interval)

                    }
                });
            }


            // Connexion au socket
            var socket = io.connect("/");
            
            
            socket.on("connect", () => {
                console.log("Socket connected!");
            });
            socket.on("disconnect", () => {
                console.error("Socket disconnected!");
            });

            socket.on("media_command", function(data) {
                if(data.command!==undefined && data.viewer!==undefined && data.args!==undefined) {
                    const command = data.command;
                    const viewer = data.viewer;
                    const target = data.target ?? null;
                    const args = data.args;

                    console.log("Websocket received for viewer ID \"" + viewer + "\"");

                    if(viewer.includes(viewerID)) {
                        console.log("   It's me! Processing the command...");

                        switch(command) {
                            case "arm":
                                if ((args.type=="video" || args.type=="picture") &&
                                        args.src!==undefined &&
                                        args.source!==undefined &&
                                        args.volume!==undefined &&
                                        args.volumeAfterLoop!==undefined &&
                                        args.loop!==undefined) {
                                    console.log("Arming media.");
                                    
                                    mediaArm(args.type, args.src, args.source, args.volume, args.volumeAfterLoop, args.loop);
                                }
                                else {
                                    console.error("'arm' command needs the following args: type, src, credit, volume, loop.", args);
                                }

                                break;
                            
                            case "armtake":
                                if ((args.type=="video" || args.type=="picture") &&
                                        args.src!==undefined &&
                                        args.source!==undefined &&
                                        args.volume!==undefined &&
                                        args.volumeAfterLoop!==undefined &&
                                        args.loop!==undefined) {
                                    console.log("Arm and take media.");
                                    
                                    let mediaData = mediaArm(args.type, args.src, args.source, args.volume, args.volumeAfterLoop, args.loop);
                                    let mediaElement = mediaData.element;
                                    let mediaPlayerID = mediaData.playerID;

                                    let foregroundElement = mediaElement.querySelector(".media-item-obj-foreground");

                                    // On take quand le média est chargé
                                    if(args.type=="picture") {
                                        foregroundElement.addEventListener("load", function() {
                                            takeArmed();
                                            // On baisse le volume des autres médias
                                            volumeSet(mediaData.playerID, true, 0, 0.03, 50);
                                        })
                                    }
                                    else if(args.type=="video") {
                                        foregroundElement.addEventListener("loadeddata", function() {
                                            takeArmed();
                                            window.setTimeout(function() {
                                                // On lance la lecture du média
                                                mediaPlay(mediaData.playerID);
                                                // On baisse le volume des autres médias
                                                volumeSet(mediaData.playerID, true, 0, 0.03, 50);
                                            }, 200);
                                        })
                                    }
                                }
                                else {
                                    console.error("'armtake' command needs the following args: type, src, source, volume, loop.", args);
                                }

                                break;
                            
                            case "take":
                                takeArmed();
                                mediaPlay(takedMedia);
                                console.log("Playing armed media.");
                                break;
                        }

                    }
                    else {
                        console.log("   Not me. Abort.");
                    }
                }
                else {
                    console.error("Invalid media_command websocket datas received.", data);
                }
            });
        </script>
    </body>
</html>