{% extends "_layout.jinja2" %}

{% block title %}
    Évènements - {{ show.name }}
{% endblock %}

{% block content %}
    <div class="container">
        <div class="row">
            <div class="col-10">
                <h1>Évènements</h1>
                <h2>{{ show.name }}</h2>
            </div>
            <div class="col-2 text-end">
                <a href="{{ url_for("events.shows") }}" class="btn btn-sm btn-outline-secondary"><i class="bi bi-arrow-left"></i> Retour</a>
            </div>
        </div>

        <p class="lead">Visionnez ici les différents évènements pour l'émission "{{ show.name }}".</p>

        <div id="filtersType" class="filter-group">
            <div class="row equal-width">
                <h3>Types d'évènements</h3>
            </div>
            <div class="row">
                <div class="col">
                    <label>
                        <input type="checkbox" checked class="form-check-input" data-pattern="streaming\..+">
                        Streaming
                    </label>
                </div>
                <div class="col">
                    <label>
                        <input type="checkbox" checked class="form-check-input" data-pattern="recording\..+">
                        Recording
                    </label>
                </div>
                <div class="col">
                    <label>
                        <input type="checkbox" checked class="form-check-input" data-pattern="jingle\..+">
                        Jingles
                    </label>
                </div>
                <div class="col">
                    <label>
                        <input type="checkbox" class="form-check-input" data-pattern="(media|web)\..+">
                        Médias
                    </label>
                </div>
                <div class="col">
                    <label>
                        <input type="checkbox" class="form-check-input" data-pattern="scene\..+">
                        Scènes
                    </label>
                </div>
                <div class="col">
                    <label>
                        <input type="checkbox" class="form-check-input" data-pattern="line\..+">
                        Lignes
                    </label>
                </div>
                <div class="col">
                    <label>
                        <input type="checkbox" checked class="form-check-input" data-pattern="marker\..+">
                        Marqueurs
                    </label>
                </div>
            </div>
        </div>

        <div id="eventListContainer">
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th scope="col" class="text-center" style="width: 50px;"></th>
                        <th scope="col" class="text-center" style="width: 200px;">Date</th>
                        <th scope="col" class="text-center" style="width: 50px;"></th>
                        <th scope="col" class="text-begin" style="width: auto;">Évènement</th>
                    </tr>
                </thead>
                <tbody id="eventList">
                    {% for e in events %}
                        <tr class="event-item" id="event-{{ e.id }}" data-id="{{ e.id }}" data-type="{{ e.type | escape }}" data-date="{{ e.date | escape }}" data-description="{{ e.description | escape }}" data-tag="{{ e.tag | escape }}" data-checked="false">
                            <td class="text-center align-middle event-item-checkbox">
                                <input type="checkbox" class="form-check-input">
                            </td>
                            <td class="text-center align-middle event-item-date">
                                {{ e.date.strftime("%d/%m/%Y") }}
                                <b>{{ e.date.strftime("%H:%M:%S") }}</b>
                            </td>
                            <td class="text-center align-middle event-item-icon event-item-display">
                                {%   if e.type == "recording.start" %}
                                    {% set icon = "record-fill" %}
                                {% elif e.type == "recording.stop" %}
                                    {% set icon = "record" %}
                                
                                {% elif e.type == "streaming.start" %}
                                    {% set icon = "wifi" %}
                                {% elif e.type == "streaming.stop" %}
                                    {% set icon = "wifi-off" %}
                                
                                {% elif e.type == "jingle.start" %}
                                    {% set icon = "easel-fill" %}
                                
                                {% elif e.type == "media.start" %}
                                    {% set icon = "play-btn-fill" %}
                                {% elif e.type == "media.stop" %}
                                    {% set icon = "play-btn" %}
                                
                                {% elif e.type == "web.start" %}
                                    {% set icon = "globe" %}
                                
                                {% elif e.type == "scene.change" %}
                                    {% set icon = "person-video" %}
                                
                                {% elif e.type == "line.done" %}
                                    {% set icon = "check-square-fill" %}
                                {% elif e.type == "line.undone" %}
                                    {% set icon = "square" %}
                                
                                {% elif e.type == "marker.set" %}
                                    {% set icon = "bookmark-fill" %}
                                
                                {% else %}
                                    {% set icon = "list-task"%}
                                {% endif %}
                                <i class="bi bi-{{ icon }}"></i>
                            </td>
                            <td class="text-begin align-middle event-item-description event-item-display">
                                {{ e.description }}
                            </td>
                        </tr>
                    {% else %}
                        <tr>
                            <td colspan="4" class="text-center fst-italic">
                                Aucun évènement n'est enregistré pour le moment.
                            </td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>

        <hr>

        <h3>Timecodes</h3>
        <p class="lead">
            La liste ci-dessous a été générée à l'aide des évènements cochés ci-dessus.<br>
            Les temps affichés sont toujours calculés par rapport au premier évènement coché.<br>
            Cette liste est spécifiquement optimisée pour les descriptions Youtube.
        </p>

        <div class="text-center py-4">
            <div>
                <button type="button" class="btn btn-primary btn-lg" onclick="if(confirm('Cette action va effacer vos modifications actuelles. Confirmez-vous ?')) autoSelectLastBroadcast();">
                    <i class="bi bi-check-all"></i> Recalculer la dernière diffusion
                </button>
            </div>
            <div class="text-center">
                <input class="form-check-input" type="checkbox" value="" id="eventsResetOnFirstScene" checked>
                <label class="form-check-label" for="eventsResetOnFirstScene">
                    Recalculer la durée à partir du premier changement de scène
                </label>
            </div>
        </div>

        <div class="row">
            <div class="input-group">
                <textarea class="form-control font-monospace" readonly id="timecodesOutput" rows="12"></textarea>
                <button type="button" class="btn btn-secondary" title="Copier le texte" onclick="this.previousElementSibling.select(); document.execCommand('copy');">
                    <i class="bi bi-copy"></i>
                </button>
            </div>
        </div>
    </div>
{% endblock %}


{% block bodyend %}
    <style>
        .filter-group label {
            cursor: pointer;
        }

        .filter-group h3 {
            font-size: 20px;
            font-weight: bolder;
        }

        .filter-group label:has(:checked) {
            font-weight: bold;
        }

        #eventListContainer {
            overflow-y: scroll;
            height: 400px;
        }

        #eventListContainer table {
            margin: 0px;
        }

        #eventListContainer thead {
            position: sticky;
            top: 0;
            z-index: 1;
        }

        .event-item[data-type="recording.start"] .event-item-display {
            font-weight: bold;
            background-color: rgb(219, 19, 69);
            color: white;
        }

        .event-item[data-type="recording.stop"] .event-item-display {
            font-weight: bold;
            background-color: rgb(65, 4, 19);
            color: white;
        }

        .event-item[data-type="streaming.start"] .event-item-display {
            font-weight: bold;
            background-color: rgb(0, 195, 255);
            color: black;
        }

        .event-item[data-type="streaming.stop"] .event-item-display {
            font-weight: bold;
            background-color: rgb(0, 74, 97);
            color: white;
        }

        .event-item[data-type="jingle.start"] .event-item-display {
            font-weight: bold;
            background-color: rgb(0, 255, 128);
            color: black;
        }


        .event-item[data-type="media.start"] .event-item-display,
        .event-item[data-type="web.start"] .event-item-display {
            background-color: rgba(231, 195, 12, 0.3);
            font-weight: bold;
        }

        .event-item[data-type="media.stop"] .event-item-display,
        .event-item[data-type="web.stop"] .event-item-display {
            background-color: rgba(130, 110, 10, 0.3);
            opacity: .5;
        }

        .event-item[data-type="line.done"] .event-item-display {
            font-weight: bold;
        }
        .event-item[data-type="line.undone"] .event-item-display {
            opacity: .5;
        }

        .event-item[data-type="scene.change"] .event-item-display {
            background-color: yellow;
            color: black;
        }

        .event-item[data-type="marker.set"] .event-item-display {
            background-color: red;
            color: white;
            font-weight: bolder;
        }

        .event-item[data-type="media.start"] .event-item-description,
        .event-item[data-type="media.stop"] .event-item-description,
        .event-item[data-type="web.start"] .event-item-description,
        .event-item[data-type="web.stop"] .event-item-description,
        .event-item[data-type="line.done"] .event-item-description,
        .event-item[data-type="line.undone"] .event-item-description {
            padding-left: 20px;
            font-style: italic;
        }


        .event-item[data-checked="true"] .event-item-checkbox {
            background-color: var(--bs-primary) !important;
            color: black;
        }
        
    </style>
    <script type="text/javascript">
        const introScenesText = {{ show.introScenes | tojson | safe }};
        const introScenes = introScenesText
            .split('\n') // Divise la chaîne en lignes
            .map(line => line.trim()) // Supprime les espaces en début et fin de chaque ligne
            .filter(line => line.length > 0); // Ignore les lignes vides

        console.log(introScenes); // Affiche le tableau résultant
    </script>
    <script src="/static/js/events/events.js"></script>
{% endblock %}